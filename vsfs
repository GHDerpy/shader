#shader vertex
#version 330 core

layout(location = 0) in vec4 position;
layout(location = 1) in vec2 texCoord;

out vec2 v_TexCoord;
out vec2 v_TexCoord2;

uniform mat4 u_MVP;
vec2 uTexCoordMin;
vec2 uTexCoordMax;

void main()
{
	//position is:
	//position.x
	//position.y
	//scale x inverted
	//scale y inverted
	gl_Position = u_MVP * position;
	v_TexCoord = texCoord;
	uTexCoordMin = vec2(0.0, 0.0);
	uTexCoordMax = vec2(1.0, 1.0);
	v_TexCoord = mix(uTexCoordMin, uTexCoordMax, texCoord.xy);
	v_TexCoord2 = vec2(texCoord.x, texCoord.y);
};

#shader fragment
#version 330 core

#extension GL_ARB_explicit_uniform_location : enable

in vec2 v_TexCoord;
in vec2 v_TexCoord2;
out vec4 color;

uniform vec4 u_Color;
uniform sampler2D u_Texture;
uniform sampler2D u_Mask;

void main()
{
	vec4 texColor = texture(u_Texture, v_TexCoord);
	vec4 texMask = texture(u_Mask, v_TexCoord2);
	color = vec4(texColor.r - texMask.r, texColor.g - texMask.g, texColor.b - texMask.b, texColor.a);
	//color = texMask;
};

//if (texture2D(u_Texture, v_TexCoord).a != 1.0f)
//{
//	discard;
//}
//color = texture2D(u_Texture, v_TexCoord);
